import type { RequestState } from './authStatus';
import type { AuthenticateRequestOptions } from './request';
type InterstitialRuleResult = RequestState | undefined;
type InterstitialRule = <T extends AuthenticateRequestOptions>(opts: T) => Promise<InterstitialRuleResult> | InterstitialRuleResult;
export declare const nonBrowserRequestInDevRule: InterstitialRule;
export declare const crossOriginRequestWithoutHeader: InterstitialRule;
export declare const isPrimaryInDevAndRedirectsToSatellite: InterstitialRule;
export declare const potentialFirstLoadInDevWhenUATMissing: InterstitialRule;
export declare const potentialRequestAfterSignInOrOutFromClerkHostedUiInDev: InterstitialRule;
export declare const satelliteInDevReturningFromPrimary: InterstitialRule;
export declare const potentialFirstRequestOnProductionEnvironment: InterstitialRule;
export declare const isNormalSignedOutState: InterstitialRule;
export declare const hasPositiveClientUatButCookieIsMissing: InterstitialRule;
export declare const hasValidHeaderToken: InterstitialRule;
export declare const hasValidCookieToken: InterstitialRule;
export declare function runInterstitialRules<T extends AuthenticateRequestOptions>(opts: T, rules: InterstitialRule[]): Promise<RequestState>;
export declare const isSatelliteAndNeedsSyncing: InterstitialRule;
export {};
//# sourceMappingURL=interstitialRule.d.ts.map